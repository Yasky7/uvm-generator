//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  ***** 
//Auto Generated by UVM-Generator
//Author: Jiacai Yuan
//E-mail: yuan861025184@163.com
//Contents:dut_env
//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  ***** 
class dut_env extends uvm_env;

	`uvm_component_utils(dut_env)
	`uvm_register_cb(dut_env,dut_callback)

	//Config
	dut_env_config env_cfg;
	
	//Components & Configs

	dut_bus_agent bus_agt; 
	bus_agent_config bus_agt_cfg;
	bus_ip bus_rgm;
	bus_ral_config bus_ral_cfg;
	dut_bus_reg_adapter bus_adp;

	dut_master_agent master_agt; 
	master_agent_config master_agt_cfg;

	dut_slave_agent slave_agt; 
	slave_agent_config slave_agt_cfg;

	dut_virtual_sequencer v_sqr;

	//TLM
	uvm_tlm_analysis_fifo#(bus_req) bus_fifo;
	uvm_tlm_analysis_fifo#(master_req) master_fifo;
	uvm_tlm_analysis_fifo#(slave_req) slave_fifo;

	//Constructor Function
	function new(string name="dut_env",uvm_component parent=null);
		super.new(name,parent);
	endfunction

	//Phase Methods
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);

	
	// Add user method declare here
	//e.g. task function
	// User method ends
endclass

function void dut_env::build_phase(uvm_phase phase);
	super.build_phase(phase);
	`uvm_info(get_name(),"Build Phase is Called",UVM_LOW)
	env_cfg=new("env_cfg");

	//bus bus_ip-RAL
	bus_agt=dut_bus_agent::type_id::create("bus_agt",this);
	bus_agt_cfg=new("bus_agt_cfg");
	bus_agt_cfg.is_active=UVM_ACTIVE;
	uvm_config_db#(bus_agent_config)::set(this,"bus_agt","agt_cfg",bus_agt_cfg);
	bus_rgm=bus_ip::type_id::create("bus_rgm",this);
	bus_rgm.build();
	bus_rgm.lock_model();
	bus_ral_cfg=new("bus_ral_cfg");
	bus_adp=dut_bus_reg_adapter::type_id::create("bus_adp");
	bus_adp.reg_adp_cfg=bus_ral_cfg;
	bus_adp.provides_responses=1;

	//master 
	master_agt=dut_master_agent::type_id::create("master_agt",this);
	master_agt_cfg=new("master_agt_cfg");
	master_agt_cfg.is_active=UVM_ACTIVE;
	uvm_config_db#(master_agent_config)::set(this,"master_agt","agt_cfg",master_agt_cfg);

	//slave 
	slave_agt=dut_slave_agent::type_id::create("slave_agt",this);
	slave_agt_cfg=new("slave_agt_cfg");
	slave_agt_cfg.is_active=UVM_PASSIVE;
	uvm_config_db#(slave_agent_config)::set(this,"slave_agt","agt_cfg",slave_agt_cfg);

	//TLM
	bus_fifo=new("bus_fifo",this);
	master_fifo=new("master_fifo",this);
	slave_fifo=new("slave_fifo",this);

	//virtual sequencer
	v_sqr=dut_virtual_sequencer::type_id::create("v_sqr",this);
	
	// Add user build here
	//e.g. Other Components build
	// User build ends
endfunction

function void dut_env::connect_phase(uvm_phase phase);
	super.connect_phase(phase);
	`uvm_info(get_name(),"Connect Phase is Called",UVM_LOW)
	//virtual sequencer
	v_sqr.bus_sqr=bus_agt.bus_sqr;
	v_sqr.master_sqr=master_agt.master_sqr;

	//TLM
	bus_agt.moi_port.connect(bus_fifo.analysis_export);
	master_agt.moi_port.connect(master_fifo.analysis_export);
	slave_agt.moi_port.connect(slave_fifo.analysis_export);

	//bus_ip-RAL
	bus_rgm.default_map.set_sequencer(bus_agt.bus_sqr,bus_adp);
	bus_rgm.default_map.set_auto_predict();
	
	
	// Add user connect here
	//e.g. TLM  interface connect
	// User connect ends
endfunction

task dut_env::run_phase(uvm_phase phase);
	super.run_phase(phase);
	`uvm_info(get_name(),"Run Phase is Called",UVM_LOW)
	
	// Add user logic here

	// User logic ends
endtask