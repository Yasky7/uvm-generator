//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  ***** 
//Auto Generated by UVM-Generator
//Author: Jiacai Yuan
//E-mail: yuan861025184@163.com
//Contents:{{MODULE}}_env
//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  ***** 
class {{MODULE}}_env extends uvm_env;

	`uvm_component_utils({{MODULE}}_env)
	`uvm_register_cb({{MODULE}}_env,{{MODULE}}_callback)

	//Config
	{{MODULE}}_env_config env_cfg;
	
	//Components & Configs
{%for agt in agt_list%}
	{{MODULE}}_{{agt.name}}_agent {{agt.name}}_agt; 
	{{agt.name}}_agent_config {{agt.name}}_agt_cfg;
	{%-if agt.ral%}
	{{agt.ral.name}} {{agt.name}}_rgm;
	{{agt.name}}_ral_config {{agt.name}}_ral_cfg;
	{{MODULE}}_{{agt.name}}_reg_adapter {{agt.name}}_adp;
	{%-if not agt.ral.auto_predict%}
	{{MODULE}}_{{agt.name}}_reg_predictor {{agt.name}}_prd;
	{%-endif%}
	{%-endif%}
{%endfor%}
{%-if agt_list|length>1%}
	{{MODULE}}_virtual_sequencer v_sqr;
{%-endif%}

	//TLM 
{%-for agt in agt_list%}
	uvm_tlm_analysis_fifo#({{agt.name}}_req) {{agt.name}}_fifo;
{%-endfor%}

	//Constructor Function
	function new(string name="{{MODULE}}_env",uvm_component parent=null);
		super.new(name,parent);
	endfunction

	//Phase Methods
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);

	{{method}}
	// Add user method declare here
	//e.g. task function
	// User method ends
endclass

function void {{MODULE}}_env::build_phase(uvm_phase phase);
	super.build_phase(phase);
	`uvm_info(get_name(),"Build Phase is Called",UVM_LOW)
	env_cfg=new("env_cfg");
{%for agt in agt_list%}
	//{{agt.name}} {{agt.ral.name}}{%-if agt.ral-%}-RAL{%-endif%}
	{{agt.name}}_agt={{MODULE}}_{{agt.name}}_agent::type_id::create("{{agt.name}}_agt",this);
	{{agt.name}}_agt_cfg=new("{{agt.name}}_agt_cfg");
{%-if agt.is_active%}
	{{agt.name}}_agt_cfg.is_active=UVM_ACTIVE;
{%-else%}
	{{agt.name}}_agt_cfg.is_active=UVM_PASSIVE;
{%-endif%}
	uvm_config_db#({{agt.name}}_agent_config)::set(this,"{{agt.name}}_agt","agt_cfg",{{agt.name}}_agt_cfg);
{%-if agt.ral%}
	{{agt.name}}_rgm={{agt.ral.name}}::type_id::create("{{agt.name}}_rgm",this);
	{{agt.name}}_rgm.build();
	{{agt.name}}_rgm.lock_model();
	{{agt.name}}_ral_cfg=new("{{agt.name}}_ral_cfg");
	{{agt.name}}_adp={{MODULE}}_{{agt.name}}_reg_adapter::type_id::create("{{agt.name}}_adp");
	{{agt.name}}_adp.reg_adp_cfg={{agt.name}}_ral_cfg;
{%-if agt.response%}
	{{agt.name}}_adp.provides_responses=1;
{%-else%}
	{{agt.name}}_adp.provides_responses=0;
{%-endif%}
{%-if not agt.ral.auto_predict%}
	{{agt.name}}_prd={{MODULE}}_{{agt.name}}_reg_predictor::type_id::create("{{agt.name}}_prd",this);
{%-endif%}
{%-endif%}
{%endfor%}
	//TLM
{%-for agt in agt_list%}
	{{agt.name}}_fifo=new("{{agt.name}}_fifo",this);
{%-endfor%}
{%if agt_list|length>1%}
	//virtual sequencer
	v_sqr={{MODULE}}_virtual_sequencer::type_id::create("v_sqr",this);
{%-endif%}
	{{build_phase}}
	// Add user build here
	//e.g. Other Components build
	// User build ends
endfunction

function void {{MODULE}}_env::connect_phase(uvm_phase phase);
	super.connect_phase(phase);
	`uvm_info(get_name(),"Connect Phase is Called",UVM_LOW)

{%-if agt_list|length>1%}
	//virtual sequencer
{%-for agt in agt_list%}
	{%-if agt.is_active%}
	v_sqr.{{agt.name}}_sqr={{agt.name}}_agt.{{agt.name}}_sqr;
	{%-endif%}		
{%-endfor%}
{%endif%}
	//TLM
{%-for agt in agt_list%}
	{{agt.name}}_agt.moi_port.connect({{agt.name}}_fifo.analysis_export);
{%-endfor%}
{%for agt in agt_list%}
{%-if agt.ral%}
	//{{agt.ral.name}}{%-if agt.ral-%}-RAL{%-endif%}
	{{agt.name}}_rgm.default_map.set_sequencer({{agt.name}}_agt.{{agt.name}}_sqr,{{agt.name}}_adp);
{%-if not agt.ral.auto_predict%}
	{{agt.name}}_prd.map={{agt.name}}_rgm.default_map;
	{{agt.name}}_prd.adapter={{agt.name}}_adp;
	{{agt.name}}_agt.moi_port.connect({{agt.name}}_prd.bus_in);
{%-else%}
	{{agt.name}}_rgm.default_map.set_auto_predict();
	{%endif%}
{%-endif%}
{%-endfor%}
	{{connect_phase}}
	// Add user connect here
	//e.g. TLM  interface connect
	// User connect ends
endfunction

task {{MODULE}}_env::run_phase(uvm_phase phase);
	super.run_phase(phase);
	`uvm_info(get_name(),"Run Phase is Called",UVM_LOW)
	{{run_phase}}
	// Add user logic here

	// User logic ends
endtask
