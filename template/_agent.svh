//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  ***** 
//Auto Generated by UVM-Generator
//Author: Jiacai Yuan
//E-mail: yuan861025184@163.com
//Contents:{{MODULE}}_{{MASTER_SLAVE_BUS}}_agent
//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  ***** 
class {{MODULE}}_{{MASTER_SLAVE_BUS}}_agent extends uvm_agent;

	`uvm_component_utils({{MODULE}}_{{MASTER_SLAVE_BUS}}_agent)

	//Config	//Interface
	{{MASTER_SLAVE_BUS}}_agent_config agt_cfg;
	virtual {{MODULE}}_{{MASTER_SLAVE_BUS}}_inf {{MASTER_SLAVE_BUS}}_inf;
	
	//TLM 
	uvm_analysis_port#({{MASTER_SLAVE_BUS}}_req) moi_port;
	
	//Components
	{{MODULE}}_{{MASTER_SLAVE_BUS}}_sequencer {{MASTER_SLAVE_BUS}}_sqr;
	{{MODULE}}_{{MASTER_SLAVE_BUS}}_driver {{MASTER_SLAVE_BUS}}_drv;
	{{MODULE}}_{{MASTER_SLAVE_BUS}}_monitor {{MASTER_SLAVE_BUS}}_moi;
	
	//Constructor Function
	function new(string name="{{MODULE}}_{{MASTER_SLAVE_BUS}}_agent",uvm_component parent=null);
		super.new(name,parent);
	endfunction
	
	//Phase Methods
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);
	
	{{method}}
	// Add user method here
	//e.g. task function
	// User method ends
endclass

function void {{MODULE}}_{{MASTER_SLAVE_BUS}}_agent::build_phase(uvm_phase phase);
	super.build_phase(phase);
	`uvm_info(get_name(),"Build Phase is Called",UVM_LOW)
	if(!uvm_config_db#({{MASTER_SLAVE_BUS}}_agent_config)::get(this,"","agt_cfg",agt_cfg))
	begin
		`uvm_fatal(get_name(),"Failed Get {MASTER_SLAVE_BUS}} Agent Config")
	end
	if(!uvm_config_db#(virtual {{MODULE}}_{{MASTER_SLAVE_BUS}}_inf)::get(this,"","{{MASTER_SLAVE_BUS}}_inf",{{MASTER_SLAVE_BUS}}_inf))
	begin
		`uvm_fatal(get_name(),"Failed Get Virtual Interfac {{MODULE}}_{{MASTER_SLAVE_BUS}}_inf")
	end
	{{MASTER_SLAVE_BUS}}_moi={{MODULE}}_{{MASTER_SLAVE_BUS}}_monitor::type_id::create("{{MASTER_SLAVE_BUS}}_moi",this);
	{{MASTER_SLAVE_BUS}}_moi.moi_cfg=agt_cfg.moi_cfg;
	if (agt_cfg.is_active==UVM_ACTIVE)
	begin
		{{MASTER_SLAVE_BUS}}_sqr={{MODULE}}_{{MASTER_SLAVE_BUS}}_sequencer::type_id::create("{{MASTER_SLAVE_BUS}}_sqr",this);
		{{MASTER_SLAVE_BUS}}_sqr.sqr_cfg=agt_cfg.sqr_cfg;
		{{MASTER_SLAVE_BUS}}_drv={{MODULE}}_{{MASTER_SLAVE_BUS}}_driver::type_id::create("{{MASTER_SLAVE_BUS}}_drv",this);
		{{MASTER_SLAVE_BUS}}_drv.drv_cfg=agt_cfg.drv_cfg;
	end
	{{build_phase}}
	// Add user build here
	//e.g. TLM build
	// User build ends
endfunction

function void {{MODULE}}_{{MASTER_SLAVE_BUS}}_agent::connect_phase(uvm_phase phase);
	super.connect_phase(phase);
	`uvm_info(get_name(),"Connect Phase is Called",UVM_LOW)
	{{MASTER_SLAVE_BUS}}_moi.{{MASTER_SLAVE_BUS}}_inf={{MASTER_SLAVE_BUS}}_inf;
	moi_port={{MASTER_SLAVE_BUS}}_moi.moi_port;
	if (agt_cfg.is_active==UVM_ACTIVE)
	begin
		{{MASTER_SLAVE_BUS}}_drv.{{MASTER_SLAVE_BUS}}_inf={{MASTER_SLAVE_BUS}}_inf;
		
		{{MASTER_SLAVE_BUS}}_drv.seq_item_port.connect({{MASTER_SLAVE_BUS}}_sqr.seq_item_export);
	end
	{{connect_phase}}
	// Add user connect here
	//e.g. TLM  interface connect
	// User connect ends
endfunction

task {{MODULE}}_{{MASTER_SLAVE_BUS}}_agent::run_phase(uvm_phase phase);
	super.run_phase(phase);
	`uvm_info(get_name(),"Run Phase is Called",UVM_LOW)
	{{run_phase}}
	// Add user logic here

	// User logic ends
endtask



	
	
	